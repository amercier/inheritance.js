{
  "version": 3,
  "file": "/mnt/hgfs/Documents/inheritance.js/inheritance.uncompressed.js",
  "sources": [
    "src/prototypal/inherit.js",
    "src/prototypal/implement.js",
    "src/inheritance.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA,ADwEA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA,AD0BA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "\n/*! inheritance/inherit */\n/**\n * Simple Native Javascript Inheritance\n * ====================================\n *\n * This module provides a function `inherit` that create prototypal inheritance\n * from a parent function to a child function.\n *\n *     inherit(parentFunction, childFunction);\n *\n *     new parentFunction() instanceof parentFunction; // true\n *     new parentFunction() instanceof childFunction ; // true\n *\n *\n * Prototypal inheritance is provided through native Javascript class\n * inheritance pattern:\n *\n *     function Parent(param1, ...) {\n *        ...\n *     }\n *\n *     function __();\n *     function Child(param1, ...) {\n *        Parent.call(this, param1, ...);\n *        ...\n *     }\n *     Child.prototype = new __();\n *     Child.prototype.constructor = Child;\n *\n * This can changed by overriding this module by your own implementation. This\n * implementation must be a AMD module that returns a method with the following\n * signature:\n *\n *     inherit(Function parentFunction, Function childFunction) : void\n *\n * @author Alexandre Mercier <pro.alexandre.mercier@gmail.com>\n */\ndefine('inheritance/prototypal/inherit',[], function() {\n\n  function __() {} // see inherhit()\n\n  /**\n   * Inheritance method\n   *\n   * @param {Function} childFunction  The child function that will inherit from parentFunction\n   * @param {Function} parentFunction The parent function that childFunction will inherit from\n   * @return null  Returns null to prevent API usage confusion\n   */\n  return function inherhit (childFunction, parentFunction) {\n\n    if (childFunction === parentFunction) {\n      throw new Error('A function cannot inherit from itself');\n    }\n\n    if ('parent' in childFunction) {\n      throw new Error(childFunction.name + ' inherit already from ' + childFunction.parent.name);\n    }\n\n    // Inheritance\n    if(parentFunction) {\n      __.prototype = parentFunction.prototype;\n      childFunction.prototype = new __();\n      childFunction.prototype.constructor = childFunction;\n      childFunction.parent = parentFunction;\n    }\n\n    return null;\n\n  };\n\n});\n",
    "\n/*! inheritance/implement */\ndefine('inheritance/prototypal/implement',[], function() {\n\n  return function implement (childFunction, parentFunction) {\n\n    if (childFunction === parentFunction) {\n      throw new Error('A function cannot implement itself');\n    }\n\n    if ( ('parent' in childFunction) && childFunction.parent === parentFunction ) {\n      throw new Error(childFunction.name + ' inherit from ' + childFunction.parent.name + ' and therefore can\\'t implement its methods');\n    }\n\n    var parentPrototype = parentFunction.prototype;\n    var childPrototype = childFunction.prototype;\n\n    for ( var i in parentPrototype ) {\n      if ( parentPrototype.hasOwnProperty(i) && !(i in childPrototype) ) {\n        childPrototype[i] = parentPrototype[i];\n      }\n    }\n\n  };\n\n});\n",
    "\n/*! inheritance/inheritance */\ndefine('inheritance/inheritance',[\n    './prototypal/inherit',\n    './prototypal/implement'\n  ], function(inherit) {\n\n    return {\n      inherit: inherit\n    };\n\n  }\n);\n"
  ]
}